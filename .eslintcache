[{"D:\\D_Drive\\React_Projects\\weather-app\\src\\index.js":"1","D:\\D_Drive\\React_Projects\\weather-app\\src\\App.js":"2","D:\\D_Drive\\React_Projects\\weather-app\\src\\reportWebVitals.js":"3","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\header.js":"4","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\weatherFetch.js":"5","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\form.js":"6","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\name.js":"7","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\body.js":"8","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\Top.js":"9","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\dayOfWeek.js":"10","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\practise.js":"11","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\timeContainer.js":"12","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\forecast.js":"13","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\about.js":"14","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\routes.js":"15"},{"size":591,"mtime":1612412321726,"results":"16","hashOfConfig":"17"},{"size":265,"mtime":1612425314826,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":631,"mtime":1612425321903,"results":"20","hashOfConfig":"17"},{"size":5157,"mtime":1609500689576,"results":"21","hashOfConfig":"17"},{"size":1173,"mtime":1612493179561,"results":"22","hashOfConfig":"17"},{"size":200,"mtime":1608344853889,"results":"23","hashOfConfig":"17"},{"size":647,"mtime":1612490102122,"results":"24","hashOfConfig":"17"},{"size":570,"mtime":1611566732822,"results":"25","hashOfConfig":"17"},{"size":1109,"mtime":1612758962363,"results":"26","hashOfConfig":"17"},{"size":1003,"mtime":1611567490671,"results":"27","hashOfConfig":"17"},{"size":1103,"mtime":1612759541763,"results":"28","hashOfConfig":"17"},{"size":7362,"mtime":1612493205222,"results":"29","hashOfConfig":"17"},{"size":724,"mtime":1612424151545,"results":"30","hashOfConfig":"17"},{"size":548,"mtime":1612756493977,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"18pycy4",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"D:\\D_Drive\\React_Projects\\weather-app\\src\\index.js",[],["69","70"],"D:\\D_Drive\\React_Projects\\weather-app\\src\\App.js",[],"D:\\D_Drive\\React_Projects\\weather-app\\src\\reportWebVitals.js",[],"D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\header.js",[],"D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\weatherFetch.js",["71","72","73","74","75","76","77","78"],"import React, { useState, useEffect } from \"react\";\r\nimport './myStyles.css';\r\nimport ReactAnimatedWeather from 'react-animated-weather';\r\n\r\n\r\nfunction WeatherFetch(props) {\r\n\r\n    const defaults = {\r\n        \r\n        icon: 'CLEAR_DAY',\r\n        color: 'black',\r\n        size: 128,\r\n        animate: true\r\n      };\r\n    const [feels_like, setFeelsLike] = useState('');\r\n    const [mainTemp, setMainTemp] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [main, setMain] = useState('');\r\n    const [icons, setIcons]= useState(defaults);\r\n \r\n \r\n    useEffect(() => {\r\n\r\n        let key = `http://api.openweathermap.org/data/2.5/weather?q=${props.city}&units=metric&appid=cb0f9c9edc0c301a181a38d4687d3814`;\r\n       \r\n        fetch(key)\r\n            .then((r) => r.json())\r\n            .then((data) => {\r\n                if (data.main != undefined) {\r\n                    console.log('The data was not undefined');\r\n                    setFeelsLike(data.main.feels_like);\r\n                    setMainTemp(Math.round(data.main.temp*10)/10);\r\n                    setDescription(data.weather[0].description);\r\n                    setMain(data.weather[0].main);\r\n                    setWeatherIcon(data.weather[0].main);\r\n                    \r\n                }\r\n\r\n                else {\r\n                    setFeelsLike(`City ${props.city} Does Not Exist`);\r\n                    setMainTemp(`City ${props.city} Does Not Exist`);\r\n                    setDescription(`City ${props.city} Does Not Exist`);\r\n                    setMain(`City ${props.city} Does Not Exist`);\r\n                    setWeatherIcon(`City ${props.city} Does Not Exist`);\r\n                }\r\n\r\n            })\r\n    }, [props], [defaults]);\r\n\r\n\r\n    function setWeatherIcon(data) {\r\n        if (data == 'Clear') {\r\n            let newDefault = {\r\n                icon: 'CLEAR_DAY',\r\n                    color: 'black',\r\n                    size: 128,\r\n                    animate: true\r\n                  };\r\n                  setIcons(newDefault);\r\n\r\n\r\n            }\r\n            else if(data == 'Rain')\r\n            {\r\n                let newDefault = {\r\n                    icon: 'RAIN',\r\n                    color: 'black',\r\n                    size: 128,\r\n                    animate: true\r\n                  };\r\n                  setIcons(newDefault);\r\n            }\r\n            \r\n            else if(data ==  'Thunderstorm')\r\n            {\r\n                let newDefault = {\r\n                    icon: 'RAIN',\r\n                    color: 'black',\r\n                    size: 128,\r\n                    animate: true\r\n                  };\r\n                  setIcons(newDefault);\r\n            }\r\n            else if(data == 'Drizzle')\r\n            {\r\n                let newDefault = {\r\n                    icon: 'RAIN',\r\n                    color: 'black',\r\n                    size: 128,\r\n                    animate: true\r\n                  };\r\n                  setIcons(newDefault);\r\n            }\r\n            else if(data == 'Snow')\r\n            {\r\n                let newDefault = {\r\n                    icon: 'SNOW',\r\n                    color: 'black',\r\n                    size: 128,\r\n                    animate: true\r\n                  };\r\n                  setIcons(newDefault);\r\n            }\r\n            else if(data == 'Mist')\r\n            {\r\n                let newDefault = {\r\n                    icon: 'FOG',\r\n                    color: 'black',\r\n                    size: 128,\r\n                    animate: true\r\n                  };\r\n                  setIcons(newDefault);\r\n            }\r\n            else if(data == 'Haze')\r\n            {\r\n                let newDefault = {\r\n                    icon: 'FOG',\r\n                    color: 'black',\r\n                    size: 128,\r\n                    animate: true\r\n                  };\r\n                  setIcons(newDefault);\r\n            }\r\n            else if(data === 'Clouds')\r\n            {\r\n                let newDefault = {\r\n                    icon: 'CLOUDY',\r\n                    color: 'black',\r\n                    size: 128,\r\n                    animate: true\r\n                  };\r\n                  setIcons(newDefault);\r\n            }\r\n            else \r\n            {\r\n                let newDefault = {\r\n                    icon: 'CLEAR_DAY',\r\n                    color: 'black',\r\n                    size: 128,\r\n                    animate: true\r\n                  };\r\n                  setIcons(newDefault);\r\n            }}\r\n            \r\n        return (\r\n            <div>\r\n                \r\n                <ReactAnimatedWeather\r\n                    icon={icons.icon}\r\n                    color={icons.color}\r\n                    size={icons.size}\r\n                    animate={icons.animate} />\r\n                    <p className=\"body-text\">In {props.city}, The Temperature is {mainTemp}, but feels like {feels_like} </p>\r\n               \r\n                <h2 className=\"label-text\">Weather : {main} </h2>\r\n                <h2 className=\"label-text\">Description : {description} </h2>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default WeatherFetch;","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\form.js",["79"],"import React, { useState } from 'react';\r\nimport './myStyles.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nfunction Form() {\r\n    const [location, setLocation] = useState('Sydney');\r\n\r\n    function changeLocationText(event) {\r\n\r\n        setLocation(event.target.value);\r\n        \r\n    }\r\n    function changeLocation(){\r\n        localStorage.clear();\r\n      localStorage.setItem('city', location);\r\n       }\r\n\r\n    return (\r\n        <div>\r\n            <Accordion >\r\n  \r\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n       <h2 className='accordion-text'>Search for City</h2>\r\n      </Accordion.Toggle>\r\n    \r\n    <Accordion.Collapse eventKey=\"0\">\r\n       <form>\r\n                \r\n                <label className='label-text'>Enter City : </label>\r\n                <input type=\"text\" name=\"location\" onChange={changeLocationText} />\r\n                <input type=\"submit\" onClick={changeLocation}></input>\r\n\r\n            </form>\r\n\r\n    </Accordion.Collapse>\r\n  \r\n  </Accordion>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Form\r\n","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\name.js",[],["80","81"],"D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\body.js",[],"D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\Top.js",[],"D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\dayOfWeek.js",[],"D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\practise.js",[],["82","83"],"D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\timeContainer.js",["84"],"import React from 'react';\r\nimport ReactAnimatedWeather from 'react-animated-weather/build/ReactAnimatedWeather';\r\n\r\nfunction TimeContainer(props){\r\n  \r\n    function trimTime(time){\r\n      switch(time)\r\n      {\r\n        case  \"00:00:00\":\r\n        return \"12 AM\";\r\n       \r\n        case  \"03:00:00\":\r\n        return \"3 AM\";\r\n\r\n        case  \"06:00:00\":\r\n        return \"6 AM\";\r\n        \r\n\r\n        case  \"09:00:00\":\r\n        return \"9 AM\";\r\n        \r\n\r\n        case  \"12:00:00\":\r\n        return \"12 PM\";\r\n        \r\n\r\n        case  \"15:00:00\":\r\n        return \"3 PM\";\r\n        \r\n\r\n        case  \"18:00:00\":\r\n        return \"6 PM\";\r\n        \r\n        case \"21:00:00\":\r\n          return \"9 PM\";\r\n\r\n       \r\n        \r\n      }\r\n      \r\n\r\n    }\r\n    return(\r\n      <div>\r\n      <h3>{trimTime(props.Time)}</h3>\r\n      \r\n      <ReactAnimatedWeather \r\n            \r\n            icon={props.Icon.icon}\r\n                    color={props.Icon.color}\r\n                    size={props.Icon.size}\r\n                    animate={props.Icon.animate} \r\n            />\r\n  </div>\r\n    )\r\n   \r\n}\r\nexport default TimeContainer;","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\forecast.js",["85","86","87","88","89","90","91","92","93","94","95"],"import React, { useEffect, useState } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './myStyles.css';\r\nimport DayOfWeek from './dayOfWeek';\r\nimport {Container} from 'react-bootstrap';\r\nimport './myStyles.css';\r\n\r\n\r\n\r\nfunction Forecast() {\r\n\r\n    //array with dates, times for the dates and icons for the times.\r\n    const [dailyWeather, setDailyWeather] = useState([]);\r\n    let city = localStorage.getItem('city');\r\n\r\n    useEffect(() => {\r\n        let weeklyKey = `http://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=1247cf22a8ea4c430db4bac89a3efbc6`;\r\n\r\n        fetch(weeklyKey)\r\n            .then((r) => r.json())\r\n            .then((data) => {\r\n                                           \r\n                setDailyWeather(\r\n                    addWeatherDays(\r\n                        sortTimesAndDates(\r\n                            addDatesToArray(data.list))));\r\n\r\n            })\r\n    }, []);\r\n\r\n\r\n    //creates a list of dates\r\n    function addDatesToArray(list) {\r\n        let array = [];\r\n        for (let i = 0; i < list.length; i++) {\r\n\r\n            array.push(list[i]);\r\n        }\r\n        return array;\r\n    }\r\n\r\n    //sorts the times and dates and adds the icons. returns a multi-dimensional array.\r\n    function sortTimesAndDates(dates) {\r\n\r\n        let datesArray = [];\r\n        let timesArray = [];\r\n        let tempTime = [];\r\n        let tempDailyIconArray = [];\r\n        let dailyIconArray = [];\r\n\r\n        for (let i = 0; i < dates.length; i++) {\r\n\r\n            //separating the date string into date and time\r\n            let dateStr = dates[i].dt_txt;\r\n            let ind = dateStr.indexOf(' ');\r\n            let date = dateStr.slice(0, ind);\r\n            let time = dateStr.slice(ind + 1);\r\n\r\n\r\n            if (datesArray[datesArray.length - 1] == date || datesArray.length === 0) {\r\n\r\n                datesArray.push(date);\r\n                tempTime.push(time);\r\n                tempDailyIconArray.push(setWeatherIcon(dates[i].weather[0].main));\r\n\r\n            }\r\n            else if (datesArray[datesArray.length - 1 !== date]) {\r\n\r\n                datesArray.push(date);\r\n\r\n                tempTime.push(time);\r\n                tempDailyIconArray.push(setWeatherIcon(dates[i].weather[0].main));\r\n            }\r\n\r\n            else {\r\n                tempTime.push(time);\r\n                datesArray.push(date);\r\n                timesArray.push(tempTime);\r\n                tempDailyIconArray.push(setWeatherIcon(dates[i].weather[0].main));\r\n                dailyIconArray.push(tempDailyIconArray);\r\n                tempDailyIconArray = [];\r\n                tempTime = [];\r\n\r\n            }\r\n        }\r\n\r\n        let sortedDateArray = [];\r\n        datesArray.forEach(e => {\r\n            if (sortedDateArray.includes(e) == false) {\r\n                sortedDateArray.push(e);\r\n            }\r\n        });\r\n        let final = []\r\n        for (let i = 0; i < sortedDateArray.length; i++) {\r\n\r\n            final.push([sortedDateArray[i], timesArray[i], dailyIconArray[i]]);\r\n        }\r\n        return final;\r\n    }\r\n\r\n\r\n    //sets the icon for 3 hour time blocks in each day\r\n    //each day is one index in an array\r\n    function setWeatherIcon(data) {\r\n\r\n        if (data == 'Clear') {\r\n            let newDefault = {\r\n                icon: 'CLEAR_DAY',\r\n                color: 'black',\r\n                size: 64,\r\n                animate: true\r\n            };\r\n            return newDefault\r\n\r\n\r\n        }\r\n        else if (data === undefined) {\r\n\r\n        }\r\n        else if (data == 'Rain') {\r\n            let newDefault = {\r\n                icon: 'RAIN',\r\n                color: 'black',\r\n                size: 64,\r\n                animate: true\r\n            };\r\n            return newDefault;\r\n        }\r\n\r\n        else if (data == 'Thunderstorm') {\r\n            let newDefault = {\r\n                icon: 'RAIN',\r\n                color: 'black',\r\n                size: 64,\r\n                animate: true\r\n            };\r\n            return newDefault;\r\n        }\r\n        else if (data == 'Drizzle') {\r\n            let newDefault = {\r\n                icon: 'RAIN',\r\n                color: 'black',\r\n                size: 64,\r\n                animate: true\r\n            };\r\n            return newDefault;\r\n        }\r\n        else if (data == 'Snow') {\r\n            let newDefault = {\r\n                icon: 'SNOW',\r\n                color: 'black',\r\n                size: 64,\r\n                animate: true\r\n            };\r\n            return newDefault;\r\n        }\r\n        else if (data == 'Mist') {\r\n            let newDefault = {\r\n                icon: 'FOG',\r\n                color: 'black',\r\n                size: 64,\r\n                animate: true\r\n            };\r\n            return newDefault;\r\n        }\r\n        else if (data == 'Haze') {\r\n            let newDefault = {\r\n                icon: 'FOG',\r\n                color: 'black',\r\n                size: 64,\r\n                animate: true\r\n            };\r\n            return newDefault;\r\n        }\r\n        else if (data === 'Clouds') {\r\n            let newDefault = {\r\n                icon: 'CLOUDY',\r\n                color: 'black',\r\n                size: 64,\r\n                animate: true\r\n            };\r\n            return newDefault;\r\n        }\r\n        else {\r\n\r\n            let newDefault = {\r\n                icon: 'CLEAR_DAY',\r\n                color: 'black',\r\n                size: 64,\r\n                animate: true\r\n            };\r\n            return newDefault;\r\n\r\n        }\r\n    }\r\n\r\n\r\n    //adds a day container for each date in the array\r\n    function addWeatherDays(sortedArray) {\r\n\r\n        let weekArray = [];\r\n        for (let i = 0; i < sortedArray.length; i++) {\r\n\r\n            //verification of each element\r\n            if (sortedArray[i][0] !== undefined && sortedArray[i][1] !== undefined && sortedArray[i][2] !== undefined) {\r\n                weekArray.push(\r\n                    \r\n               \r\n               <DayOfWeek className=\"day-container\"\r\n                    Date={sortedArray[i][0]}\r\n                    Times={sortedArray[i][1]}\r\n                    Icons={sortedArray[i][2]}\r\n                />\r\n                \r\n                \r\n                )\r\n            }\r\n        }\r\n        return weekArray;\r\n    }\r\n\r\n\r\n    function displayWeather(dailyWeather) {\r\n        if (dailyWeather === []) {\r\n            return <div><h2>Unable to display daily weather</h2></div>\r\n        }\r\n        else {\r\n            return dailyWeather;\r\n        }\r\n    }\r\n    return (\r\n\r\n        <div className='forecast' >\r\n            <Container fluid className='accordion'>\r\n                <Accordion className='accordion'>\r\n\r\n\r\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\" className='accordion'>\r\n                        <h2 className='accordion-text'>5 Day Forcast</h2>\r\n                    </Accordion.Toggle>\r\n\r\n                    <Accordion.Collapse eventKey=\"0\">\r\n\r\n                        <Container>\r\n\r\n                            {displayWeather(dailyWeather)}\r\n\r\n                        </Container>\r\n\r\n                    </Accordion.Collapse>\r\n\r\n\r\n                </Accordion>\r\n            </Container>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Forecast;","D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\about.js",[],"D:\\D_Drive\\React_Projects\\weather-app\\src\\components\\routes.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":29,"column":31,"nodeType":"102","messageId":"103","endLine":29,"endColumn":33},{"ruleId":"100","severity":1,"message":"104","line":51,"column":18,"nodeType":"102","messageId":"103","endLine":51,"endColumn":20},{"ruleId":"100","severity":1,"message":"104","line":62,"column":26,"nodeType":"102","messageId":"103","endLine":62,"endColumn":28},{"ruleId":"100","severity":1,"message":"104","line":73,"column":26,"nodeType":"102","messageId":"103","endLine":73,"endColumn":28},{"ruleId":"100","severity":1,"message":"104","line":83,"column":26,"nodeType":"102","messageId":"103","endLine":83,"endColumn":28},{"ruleId":"100","severity":1,"message":"104","line":93,"column":26,"nodeType":"102","messageId":"103","endLine":93,"endColumn":28},{"ruleId":"100","severity":1,"message":"104","line":103,"column":26,"nodeType":"102","messageId":"103","endLine":103,"endColumn":28},{"ruleId":"100","severity":1,"message":"104","line":113,"column":26,"nodeType":"102","messageId":"103","endLine":113,"endColumn":28},{"ruleId":"105","severity":1,"message":"106","line":3,"column":8,"nodeType":"107","messageId":"108","endLine":3,"endColumn":12},{"ruleId":"96","replacedBy":"109"},{"ruleId":"98","replacedBy":"110"},{"ruleId":"96","replacedBy":"111"},{"ruleId":"98","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":7,"column":7,"nodeType":"115","messageId":"116","endLine":39,"endColumn":8},{"ruleId":"105","severity":1,"message":"106","line":2,"column":8,"nodeType":"107","messageId":"108","endLine":2,"endColumn":12},{"ruleId":"117","severity":1,"message":"118","line":31,"column":8,"nodeType":"119","endLine":31,"endColumn":10,"suggestions":"120"},{"ruleId":"100","severity":1,"message":"104","line":62,"column":51,"nodeType":"102","messageId":"103","endLine":62,"endColumn":53},{"ruleId":"100","severity":1,"message":"104","line":91,"column":45,"nodeType":"102","messageId":"103","endLine":91,"endColumn":47},{"ruleId":"100","severity":1,"message":"104","line":108,"column":18,"nodeType":"102","messageId":"103","endLine":108,"endColumn":20},{"ruleId":"100","severity":1,"message":"104","line":122,"column":23,"nodeType":"102","messageId":"103","endLine":122,"endColumn":25},{"ruleId":"100","severity":1,"message":"104","line":132,"column":23,"nodeType":"102","messageId":"103","endLine":132,"endColumn":25},{"ruleId":"100","severity":1,"message":"104","line":141,"column":23,"nodeType":"102","messageId":"103","endLine":141,"endColumn":25},{"ruleId":"100","severity":1,"message":"104","line":150,"column":23,"nodeType":"102","messageId":"103","endLine":150,"endColumn":25},{"ruleId":"100","severity":1,"message":"104","line":159,"column":23,"nodeType":"102","messageId":"103","endLine":159,"endColumn":25},{"ruleId":"100","severity":1,"message":"104","line":168,"column":23,"nodeType":"102","messageId":"103","endLine":168,"endColumn":25},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar",["121"],["122"],["121"],["122"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'city' and 'sortTimesAndDates'. Either include them or remove the dependency array.","ArrayExpression",["123"],"no-global-assign","no-unsafe-negation",{"desc":"124","fix":"125"},"Update the dependencies array to be: [city, sortTimesAndDates]",{"range":"126","text":"127"},[1036,1038],"[city, sortTimesAndDates]"]